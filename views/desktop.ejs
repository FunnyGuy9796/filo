<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>Filo</title>

        <style>
            @font-face {
                font-family: "Poppins";
                src: url("/fonts/Poppins-Regular.ttf") format("truetype");
            }

            @font-face {
                font-family: "Poppins-Medium";
                src: url("/fonts/Poppins-Medium.ttf") format("truetype");
            }

            body {
                overflow: hidden;
                font-family: "Poppins";
            }

            #wallpaper {
                display: flex;
                justify-content: center;
                align-items: center;
                position: absolute;
                top: 0;
                left: 0;
                height: 100%;
            }

            #wallpaper img {
                width: 100%;
                height: auto;
                user-select: none;
            }

            .notify {
                position: absolute;
                top: 20px;
                right: -400px;
                width: 350px;
                height: 200px;
                background-color: #282828;
                border-radius: 10px;
                box-shadow:
                    0 6px 8px rgba(0, 0, 0, 0.5),
                    6px 0 8px rgba(0, 0, 0, 0.5),
                    0 -6px 8px rgba(0, 0, 0, 0.5),
                    -6px 0 8px rgba(0, 0, 0, 0.5);
                color: white;
                font-size: 18px;
                transition: 0.2s;
                z-index: 1000;
            }

            .notify-close {
                display: block;
                margin-top: 15px;
                margin-right: 15px;
                padding: 5px;
                width: 15px;
                height: 15px;
                border-radius: 10px;
                float: right;
                transition: 0.2s;
            }

            .notify-close:hover {
                background-color: #181818;
            }

            .notify-close img {
                display: block;
                margin-left: auto;
                margin-right: auto;
                width: 80%;
                height: auto;
            }

            .notify-title {
                display: block;
                margin-top: 20px;
                margin-left: 20px;
                user-select: none;
            }

            .notify-body {
                display: -webkit-box;
                margin-top: 10px;
                margin-left: 20px;
                margin-right: 20px;
                height: 80px;
                line-clamp: 3;
                -webkit-line-clamp: 3; /* Number of lines to show */
                -webkit-box-orient: vertical;
                overflow: hidden; /* Hide overflowed text */
                text-overflow: ellipsis;
                user-select: none;
            }

            .notify-action {
                display: block;
                position: absolute;
                left: 10%;
                bottom: 10px;
                padding: 5px;
                width: 80%;
                background-color: black;
                border-radius: 10px;
                text-align: center;
                transition: 0.2s;
                user-select: none;
            }

            .notify-action:hover{
                background-color: #005f9e;
            }

            #taskbar {
                position: absolute;
                left: 0;
                bottom: 0;
                width: 100%;
                height: 60px;
                background-color: #282828;
                z-index: 1000;
            }

            #taskbar p {
                position: absolute;
                top: 0;
                right: 20px;
                padding-top: 3px;
                color: white;
                text-align: center;
                font-size: 18px;
                font-family: "Poppins-Medium";
                line-height: 1;
                user-select: none;
            }

            #taskbar-apps {
                position: absolute;
                left: 20px;
                width: 80%;
            }

            .taskbar-app {
                display: block;
                margin-top: 10px;
                margin-left: 5px;
                margin-right: 5px;
                width: 50px;
                height: 50px;
            }

            .taskbar-app img {
                width: 80%;
                height: auto;
            }

            .window {
                position: absolute;
                background-color: #282828;
                border-radius: 10px;
                box-shadow: 
                    0 -6px 8px rgba(0, 0, 0, 0.5),
                    0 6px 8px rgba(0, 0, 0, 0.5),
                    -6px 0 8px rgba(0, 0, 0, 0.5),
                    6px 0 8px rgba(0, 0, 0, 0.5);
                overflow: hidden;
            }

            .window iframe {
                display: block;
                position: absolute;
                top: 40px;
                left: 0;
                width: 100%;
                height: calc(100% - 40px);
                border: none;
            }

            .win-close {
                display: block;
                position: absolute;
                top: 7px;
                right: 7px;
                width: 20px;
                height: 20px;
                padding: 3px;
                border-radius: 50%;
                transition: 0.2s;
            }

            .win-close:hover {
                background-color: #181818;
            }

            .win-close img {
                margin-top: auto;
                margin-left: 50%;
                margin-right: 0;
                margin-bottom: auto;
                width: 60%;
                height: auto;
                transform: translateX(-50%);
            }

            .win-max {
                display: block;
                position: absolute;
                top: 7px;
                right: 35px;
                width: 20px;
                height: 20px;
                padding: 3px;
                border-radius: 50%;
                transition: 0.2s;
            }

            .win-max:hover {
                background-color: #181818;
            }

            .win-max img {
                margin-top: auto;
                margin-left: 50%;
                margin-right: 0;
                margin-bottom: auto;
                width: 60%;
                height: auto;
                transform: translate(-50%, -5%);
            }

            .win-min {
                display: block;
                position: absolute;
                top: 7px;
                right: 63px;
                width: 20px;
                height: 20px;
                padding: 3px;
                border-radius: 50%;
                transition: 0.2s;
            }

            .win-min:hover {
                background-color: #181818;
            }

            .win-min img {
                margin-top: auto;
                margin-left: 50%;
                margin-right: 0;
                margin-bottom: auto;
                width: 60%;
                height: auto;
                transform: translate(-50%, 30%);
            }
        </style>
    </head>

    <body>
        <div id="wallpaper">
            <img id="wallpaperImg" src="/wallpaper">
        </div>

        <div class="notify" id="notify">
            <a class="notify-close" id="notify-close" onclick="closeNotify()"><img src="/icons/close.svg"></a>
            <b class="notify-title" id="notify-title"></b>
            <p class="notify-body" id="notify-body"></p>
            <a class="notify-action" id="notify-action"></a>
        </div>

        <div id="taskbar">
            <div id="taskbar-apps"></div>
            <p id="clock">TIME</p>
        </div>

        <script>
            const wallpaper = document.getElementById("wallpaper");
            const wallpaperImg = document.getElementById("wallpaperImg");

            const notify = document.getElementById("notify");
            const notifyClose = document.getElementById("notify-close");
            const notifyTitle = document.getElementById("notify-title");
            const notifyBody = document.getElementById("notify-body");
            const notifyAction = document.getElementById("notify-action");

            const taskbarApps = document.getElementById("taskbar-apps");

            const clock = document.getElementById("clock");

            let isNotifying = false;
            let notifyQueue = [];
            let currNotify = null;

            let windows = [];

            let offsetX = 0;
            let offsetY = 0;

            let currZ = 1;

            function delay(time) {
                return new Promise(resolve => setTimeout(resolve, time));
            }

            async function notifyLoop() {
                while (notifyQueue.length > 0) {
                    currNotify = notifyQueue.shift();

                    const { title, body, action, actionText } = currNotify;

                    notifyTitle.textContent = title;
                    notifyBody.textContent = body;

                    if (action == undefined) {
                        notifyAction.style.display = "none";
                    } else {
                        notifyAction.style.display = "block";
                        notifyAction.textContent = actionText;
                        notifyAction.onclick = function() {
                            action();
                            resolvePromise();
                        };
                    }

                    notify.style.right = "20px";
                    isNotifying = true;

                    await new Promise(resolve => {
                        function resolvePromise() {
                            closeNotify();
                            setTimeout(resolve, 300);
                        }

                        notifyClose.onclick = resolvePromise;

                        if (action != undefined) {
                            notifyAction.onclick = function() {
                                action();
                                resolvePromise();
                            };
                        }
                    });

                    await delay(500);
                    closeNotify();
                    await delay(1500);
                }

                isNotifying = false;
                currNotify = null;
            }

            window.showNotify = function(title, body, actionText, action) {
                notifyQueue.push({ title, body, actionText, action });

                if (!isNotifying) {
                    notifyLoop();
                }
            }

            function closeNotify() {
                notify.style.right = "-400px";

                if (currNotify) {
                    const index = notifyQueue.indexOf(currNotify);

                    if (index > -1) {
                        notifyQueue.splice(index, 1);
                    }

                    currNotify = null;
                }
            }

            window.createWin = function(appId, x, y, width, height, isMax) {
                let uuid = Math.floor(Math.random() * 1001);
                while (windows.some(win => win.uid === uuid)) {
                    uuid = Math.floor(Math.random() * 1001);
                }

                const win = document.createElement("div");
                win.id = "win-" + uuid;
                win.className = "window";
                win.style.top = y + "px";
                win.style.left = x + "px";
                win.style.width = width + "px";
                win.style.height = height + "px";
                win.style.zIndex = currZ;

                win.dataset.currX = x;
                win.dataset.currY = y;
                win.dataset.currW = width;
                win.dataset.currH = height;
                win.dataset.canDrag = "true";
                win.dataset.isDragging = "false";
                win.dataset.canResize = "true";
                win.dataset.isResizing = "false";
                win.dataset.isMax = "false";

                const clsBtn = document.createElement("a");
                clsBtn.id = "cls-" + uuid;
                clsBtn.className = "win-close";
                clsBtn.onclick = function() {
                    fetch("/stop-app/" + appId + "/" + uuid, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        }
                    })
                    .then(response => response.text())
                    .then(data => {
                        if (data != "success") {
                            console.error("Failed to close app: ", data);
                        }

                        closeWin("win-" + uuid);
                    })
                    .catch(error => {
                        console.error("Error: ", error);
                    });
                };
                win.appendChild(clsBtn);

                const clsImg = document.createElement("img");
                clsImg.src = "/icons/close.svg";
                clsBtn.appendChild(clsImg);

                const maxBtn = document.createElement("a");
                maxBtn.id = "max-" + uuid;
                maxBtn.className = "win-max";
                maxBtn.onclick = function() {
                    maxWin("win-" + uuid)
                };
                win.appendChild(maxBtn);

                const maxImg = document.createElement("img");
                maxImg.src = "/icons/max.svg";
                maxBtn.appendChild(maxImg);

                const minBtn = document.createElement("a");
                minBtn.id = "min-" + uuid;
                minBtn.className = "win-min";
                win.appendChild(minBtn);

                const minImg = document.createElement("img");
                minImg.src = "/icons/min.svg";
                minBtn.appendChild(minImg);

                const application = document.createElement("iframe");
                application.id = "app-" + uuid;
                application.src = "/app/" + appId + "/" + uuid;

                application.onload = function() {
                    const appDoc = application.contentDocument || application.contentWindow.document;

                    application.contentWindow.customData = {
                        appId: appId
                    };

                    appDoc.addEventListener("mousedown", function() {
                        topWin(win);
                    });
                };

                win.appendChild(application);

                document.body.appendChild(win);

                windows.push({
                    id: win.id,
                    uid: uuid,
                    app: appId,
                    zIndex: currZ
                });

                if (isMax) {
                    maxWin(win.id);
                }

                currZ++;
            }

            function closeWin(winId) {
                const currWin = document.getElementById(winId);

                if (currWin) {
                    if (currWin.style.zIndex == currZ) {
                        currZ--;
                    }

                    currWin.style.transition = "0.3s";
                    currWin.style.transform = "scale(0.8)";
                    currWin.style.opacity = 0;

                    currWin.addEventListener("transitionend", delWin, { once: true });

                    function delWin(event) {
                        currWin.remove();

                        const winPair = windows.find(win => win.id === currWin.id);
                        const index = windows.indexOf(winPair);

                        windows.splice(index, 1);
                    }
                }
            }

            function maxWin(winId) {
                const currWin = document.getElementById(winId);

                if (currWin) {
                    if (currWin.dataset.isMax === "true") {
                        currWin.style.left = currWin.dataset.currX + "px";
                        currWin.style.top = currWin.dataset.currY + "px";
                        currWin.style.width = currWin.dataset.currW + "px";
                        currWin.style.height = currWin.dataset.currH + "px";
                        currWin.style.borderRadius = "10px";
                        currWin.style.boxShadow = "0 -6px 8px rgba(0, 0, 0, 0.5), 0 6px 8px rgba(0, 0, 0, 0.5), -6px 0 8px rgba(0, 0, 0, 0.5), 6px 0 8px rgba(0, 0, 0, 0.5)"
                        currWin.dataset.isMax = "false";
                        currWin.dataset.canDrag = "true";
                        currWin.dataset.canResize = "true";
                    } else if (currWin.dataset.isMax === "false") {
                        currWin.style.left = 0;
                        currWin.style.top = 0;
                        currWin.style.width = "100%";
                        currWin.style.height = "calc(100% - 60px)";
                        currWin.style.borderRadius = 0;
                        currWin.style.boxShadow = "none";
                        currWin.dataset.isMax = "true";
                        currWin.dataset.canDrag = "false";
                        currWin.dataset.canResize = "false";
                    }
                }
            }

            function topWin(win) {
                for (let i = 0; i < windows.length; i++) {
                    const presWin = document.getElementById(windows[i].id);

                    if (presWin != win && presWin.style.zIndex > win.style.zIndex) {
                        presWin.style.zIndex--;
                    }
                }

                win.style.zIndex = currZ;
            }

            document.addEventListener("mousedown", function(event) {
                const currWin = event.target;
                const application = currWin.getElementsByTagName("iframe")[0];

                if (windows.some(win => win.id === currWin.id)) {
                    if (currWin.style.zIndex < currZ) {
                        topWin(currWin);
                    }

                    if (currWin.dataset.canDrag === "true") {
                        offsetX = event.clientX - currWin.dataset.currX;
                        offsetY = event.clientY - currWin.dataset.currY;

                        currWin.dataset.isDragging = "true";
                        application.style.pointerEvents = "none";
                    }
                }
            });

            document.addEventListener("mousemove", function(event) {
                const currWin = event.target;

                if (windows.some(win => win.id === currWin.id) && currWin.dataset.isDragging === "true") {
                    if (event.pageY - offsetY < 0) {
                        currWin.style.top = 0;
                    } else {
                        currWin.style.top = event.pageY - offsetY + "px";
                    }
                    currWin.style.left = event.pageX - offsetX + "px";
                    currWin.dataset.currX = event.pageX - offsetX;
                    currWin.dataset.currY = event.pageY - offsetY;
                }
            });

            document.addEventListener("mouseup", function(event) {
                const currWin = event.target;
                const application = currWin.getElementsByTagName("iframe")[0];

                if (windows.some(win => win.id === currWin.id)) {
                    currWin.dataset.isDragging = "false";
                    application.style.pointerEvents = "auto";
                }
            });
            
            function updateWallpaper() {
                wallpaperImg.src = "/wallpaper";
            }

            async function updateTaskbar() {
                const response = await fetch("/api/mem/readNode/taskbar");
                const result = await response.json();

                if (result.message == "success") {
                    for (let i = 0; i < result.node.length; i++) {
                        const appId = result.node[i].appId;
                        console.log("Taskbar: ", appId);

                        const taskbarApp = document.createElement("a");
                        taskbarApp.className = "taskbar-app";
                        taskbarApp.id = "taskbar-" + appId;
                        taskbarApp.href = "javascript:createWin('" + appId + "', 100, 100, 600, 400, false)";

                        fetch("/app-info/" + appId)
                            .then(response => response.json())
                            .then(data => {
                                console.log("App Info: ", data);
                                const taskbarAppImg = document.createElement("img");
                                taskbarAppImg.id = "taskbar-img-" + appId;
                                taskbarAppImg.src = "/" + appId + "/" + data.appIcon;
                                taskbarApp.appendChild(taskbarAppImg);
                            })
                            .catch(error => console.error("Error: ", error));

                        taskbarApps.appendChild(taskbarApp);
                    }
                }
            }

            function updateTime() {
                const days = [
                    "Sun",
                    "Mon",
                    "Tue",
                    "Wed",
                    "Thu",
                    "Fri",
                    "Sat"
                ];

                const months = [
                    "Jan",
                    "Feb",
                    "Mar",
                    "Apr",
                    "May",
                    "Jun",
                    "Jul",
                    "Aug",
                    "Sep",
                    "Oct",
                    "Nov",
                    "Dec"
                ];

                const now = new Date();
                const day = days[now.getDay()];

                const month = months[now.getMonth()];
                const date = String(now.getDate());

                let hours = now.getHours();
                const minutes = String(now.getMinutes()).padStart(2, '0');
                const period = hours >= 12 ? "PM" : "AM";
                hours = hours % 12 || 12;

                clock.innerHTML = day + " " + month + " " + date + "&nbsp;&nbsp;&nbsp;&nbsp;" + String(hours).padStart(2, "0") + ":" + minutes + " " + period;
            }

            updateTime();
            
            setInterval(updateTime, 1000);

            window.onload = function() {
                updateTaskbar();
            };
        </script>
    </body>
</html>
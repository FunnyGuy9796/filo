<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <title>File Explorer</title>

        <script src="/js/api.js"></script>

        <style>
            @font-face {
                font-family: "Poppins";
                src: url("/file/sys/apps/file_explorer/fonts/Poppins-Regular.ttf") format("truetype");
            }

            body {
                height: 100vh;
                font-family: "Poppins";
                overflow: hidden;
            }
            
            #quick-access {
                display: block;
                position: absolute;
                top: 0;
                left: 0;
                padding-left: 5px;
                padding-right: 5px;
                width: 150px;
                height: 100%;
                background-color: #181818;
                border-top-right-radius: 10px;
            }

            .quick-link {
                display: block;
                padding: 5px;
                width: calc(100% - 10px);
                background-color: transparent;
                color: white;
                border-radius: 10px;
                text-align: center;
                transition: 0.2s;
                user-select: none;
            }

            .quick-link:hover {
                background-color: #282828;
            }

            .quick-link:first-of-type {
                margin-top: 15%;
            }

            .quick-link:not(:first-of-type) {
                margin-top: 10px;
            }

            #path-back {
                display: block;
                position: absolute;
                top: 16px;
                left: 180px;
                width: 15px;
                height: 15px;
            }

            #path-back img {
                width: 100%;
                height: auto;
            }

            #path-forward {
                display: block;
                position: absolute;
                top: 16px;
                left: 220px;
                width: 15px;
                height: 15px;
            }

            #path-forward img {
                width: 100%;
                height: auto;
            }

            #path-input {
                margin-top: 0;
                margin-left: 250px;
                width: calc(100% - 350px);
                direction: ltr;
            }

            input[type=text] {
                padding: 10px;
                color: white;
                background-color: #181818;
                border: none;
                border-radius: 10px;
                box-sizing: border-box;
                font-size: 18px;
            }

            input[type=text]:focus {
                outline: 2px solid #005f9e;
            }

            #path-links {
                display: block;
                position: absolute;
                top: 9px;
                margin-left: 250px;
                padding: 10px;
                color: white;
                font-size: 18px;
                line-height: 1;
                user-select: none;
                opacity: 0;
            }

            #path-links a {
                padding: 5px;
                border-radius: 10px;
                background-color: black;
                text-align: center;
            }

            #path-links a:hover {
                background-color: #282828;
            }

            #path-links span {
                top: 13px;
                font-size: 14px;
            }

            #explorer-view {
                display: grid;
                position: absolute;
                grid-template-columns: repeat(auto-fit, 120px);
                grid-auto-rows: min-content;
                top: 70px;
                left: 180px;
                padding: 10px;
                width: calc(100% - 220px);
                height: calc(100% - 110px);
                overflow-y: auto;
                gap: 5px;
                align-items: start;
            }

            .explorer-item {
                padding: 5px;
                width: 100px;
                height: 80px;
                background-color: transparent;
                border-radius: 10px;
                text-align: center;
                user-select: none;
                transition: 0.2s;
            }

            .active {
                background-color: #005f9e;
            }

            .explorer-item:hover {
                background-color: #005f9e;
            }

            .explorer-item img {
                margin-top: 10px;
                width: auto;
                height: 40px;
                max-height: 40px;
            }

            .explorer-item p {
                display: block;
                margin-top: 0;
                width: 100%;
                color: white;
                font-size: 14px;
                line-height: 1.5;
                user-select: none;
            }

            .context-menu {
                position: absolute;
                padding: 8px;
                width: 200px;
                background-color: #282828;
                border-radius: 10px;
                box-shadow: 
                    0 -6px 8px rgba(0, 0, 0, 0.5),
                    0 6px 8px rgba(0, 0, 0, 0.5),
                    -6px 0 8px rgba(0, 0, 0, 0.5),
                    6px 0 8px rgba(0, 0, 0, 0.5);
                z-index: 1001;
                user-select: none;
            }

            .context-menu a {
                display: block;
                padding: 5px;
                width: calc(100% - 10px);
                background-color: transparent;
                color: white;
                border-radius: 10px;
                text-align: left;
                transition: 0.2s;
                user-select: none;
            }

            .context-menu a:hover {
                background-color: #005f9e;
            }

            .context-menu div {
                position: absolute;
                padding: 8px;
                width: 200px;
                background-color: #282828;
                border-radius: 10px;
                box-shadow: 
                    0 -6px 8px rgba(0, 0, 0, 0.5),
                    0 6px 8px rgba(0, 0, 0, 0.5),
                    -6px 0 8px rgba(0, 0, 0, 0.5),
                    6px 0 8px rgba(0, 0, 0, 0.5);
                z-index: 1001;
                user-select: none;
            }

            .context-menu img {
                margin-top: 4px;
                margin-right: 4px;
                width: auto;
                height: 17px;
                float: right;
            }
        </style>
    </head>

    <body>
        <div id="quick-access">
            <a class="quick-link" id="quick-home" onclick="searchPath(`/usr/home`)">Home</a>
            <a class="quick-link" id="quick-desktop" onclick="searchPath(`/usr/home/Desktop`)">Desktop</a>
            <a class="quick-link" id="quick-documents" onclick="searchPath(`/usr/home/Documents`)">Documents</a>
            <a class="quick-link" id="quick-downloads" onclick="searchPath(`/usr/home/Downloads`)">Downloads</a>
            <a class="quick-link" id="quick-music" onclick="searchPath(`/usr/home/Music`)">Music</a>
            <a class="quick-link" id="quick-pictures" onclick="searchPath(`/usr/home/Pictures`)">Pictures</a>
            <a class="quick-link" id="quick-videos" onclick="searchPath(`/usr/home/Videos`)">Videos</a>
        </div>

        <a id="path-back" onclick="navBack()">
            <img src="/file/sys/apps/file_explorer/images/back-arrow.svg">
        </a>

        <a id="path-forward" onclick="navForward()">
            <img src="/file/sys/apps/file_explorer/images/forward-arrow.svg">
        </a>

        <input id="path-input" type="text" onfocus="hidePathLinks()" onblur="showPathLinks()">

        <div id="path-links"></div>

        <div id="explorer-view"></div>

        <div class="context-menu" id="explorer-context" style="display: none;">
            <a id="context-sort">&nbsp;&nbsp;&nbsp;&nbsp;Sort by<img src="/file/sys/apps/file_explorer/images/forward-arrow.svg">
                <div style="display: none;" data-for="context-sort">
                    <a>&nbsp;&nbsp;&nbsp;&nbsp;Test</a>
                    <a>&nbsp;&nbsp;&nbsp;&nbsp;Test</a>
                </div>
            </a>
            <a id="context-refresh" data-function="searchPath">&nbsp;&nbsp;&nbsp;&nbsp;Refresh</a>
        </div>

        <script>
            const quickAccess = document.getElementById("quick-access");
            const pathBack = document.getElementById("path-back");
            const pathForward = document.getElementById("path-forward");
            const pathInput = document.getElementById("path-input");
            const pathLinks = document.getElementById("path-links");
            const explorerView = document.getElementById("explorer-view");
            const explorerContext = document.getElementById("explorer-context");

            let filePath = "/usr/home";
            let prevPaths = [];
            let futurePaths = [];

            let appData;

            function searchPath(path) {
                if (path === "" || path == undefined) {
                    path = filePath;
                }

                if (prevPaths[prevPaths.length - 1] !== path) {
                    prevPaths.push(path);
                }

                explorerView.innerHTML = "";

                fetch(`/file/${path}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }

                        const contentType = response.headers.get("Content-Type");

                        if (contentType.includes("application/json")) {
                            return response.json().then(data => {
                                if (data.hasOwnProperty("files")) {
                                    data.files.forEach(file => {
                                        let isDir = file.dir;
                                        const name = file.name;
                                        let ext = "";
                                        const showStatus = name[0] !== "." || appData.show_hidden;

                                        if (showStatus) {
                                            filePath = `${path}/${name}`;
                                            if (path !== "/") {
                                                filePath = `${path}/${name}`;
                                            }

                                            const item = document.createElement("a");
                                            item.className = "explorer-item";
                                            item.id = "item-" + name;

                                            const itemImg = document.createElement("img");
                                            itemImg.id = "item-img-" + name;
                                            item.appendChild(itemImg);

                                            const itemLabel = document.createElement("p");
                                            itemLabel.id = "item-label-" + name;
                                            itemLabel.innerText = name;
                                            item.appendChild(itemLabel);
                                            
                                            if (isDir) {
                                                itemImg.src = "/file/sys/apps/file_explorer/images/folder.svg";
                                                
                                                (function(filePath) {
                                                    item.ondblclick = function() {
                                                        futurePaths = [];
                                                        searchPath(filePath);
                                                    };
                                                })(filePath);
                                            } else {
                                                const periodIndex = name.indexOf(".");

                                                if (periodIndex !== -1 && periodIndex < name.length - 1) {
                                                    ext = name.slice(periodIndex + 1).trim();
                                                }

                                                switch (ext) {
                                                    case "txt":
                                                        itemImg.src = "/file/sys/apps/file_explorer/images/text-file.svg";
                                                        break;
                                                    case "jpg":
                                                    case "png":
                                                    case "svg":
                                                        itemImg.src = "/file/" + filePath;
                                                        break;
                                                    case "ejs":
                                                    case "js":
                                                    case "json":
                                                        itemImg.src = "/file/sys/apps/file_explorer/images/code-file.svg";
                                                        break;
                                                    default:
                                                        itemImg.src = "/file/sys/apps/file_explorer/images/text-file.svg";
                                                        break;
                                                }
                                            }

                                            explorerView.appendChild(item);
                                        }
                                    });

                                    filePath = path;
                                    showPathLinks();
                                }
                            });
                        }
                    })
                    .catch(error => {
                        console.error("there was an error retrieving content at the specified path");
                        searchPath("/usr/home");
                    });
            }

            function hidePathLinks() {
                pathLinks.style.opacity = 0;
                pathLinks.style.pointerEvents = "none";
                pathLinks.innerHTML = "";
                pathInput.value = filePath;
            }

            function getRelativePath(target) {
                let targetIndex = filePath.indexOf(target);

                if (targetIndex !== -1) {
                    let result = filePath.substring(0, targetIndex + target.length);
                    return result;
                } else {
                    return null;
                }
            }

            function showPathLinks() {
                const pathParts = filePath.split("/").filter(part => part.trim() !== "");
                const pathInputRect = pathInput.getBoundingClientRect();

                pathInput.value = "";
                pathLinks.innerHTML = "";

                if (pathParts.length < 1) {
                    const pathSlash = document.createElement("span");
                    pathSlash.id = `slash-0-0`;
                    pathSlash.textContent = " / ";
                    pathLinks.appendChild(pathSlash);
                } else {
                    for (let i = 0; i < pathParts.length; i++) {
                        const pathSlash = document.createElement("span");
                        pathSlash.id = `slash-${pathParts[i]}-${i}`;
                        pathSlash.textContent = " / ";
                        pathLinks.appendChild(pathSlash);

                        const pathPart = document.createElement("a");
                        pathPart.id = `path-${pathParts[i]}-${i}`;
                        pathPart.textContent = pathParts[i];
                        const relativePath = getRelativePath(pathParts[i]);
                        pathPart.onclick = function() {
                            searchPath(relativePath);
                        };
                        pathLinks.appendChild(pathPart);

                        const pathPartRect = pathPart.getBoundingClientRect();

                        if (pathPartRect.right > pathInputRect.right) {
                            pathPart.textContent = "...";
                            break;
                        } else if (pathPartRect.left > pathInputRect.right) {
                            pathPart.remove();
                        }
                    }
                }

                pathLinks.style.opacity = 1;
                pathLinks.style.pointerEvents = "auto";
            }

            function filter() {
                const result = prevPaths.length > 0 ? [prevPaths[0]] : [];

                for (let i = 0; i < prevPaths.length; i++) {
                    if (prevPaths[i] !== result[result.length - 1]) {
                        result.push(prevPaths[i]);
                    }
                }

                return result;
            }

            function navBack() {
                if (prevPaths.length > 1) {
                    const theCurrPath = prevPaths.lastIndexOf(filePath);
                    const deleteCount = prevPaths.length - theCurrPath;
                    const removedPaths = prevPaths.splice(theCurrPath, deleteCount);

                    futurePaths.push(...removedPaths);
                    searchPath(prevPaths[prevPaths.length - 1]);
                }
            }

            function navForward() {
                if (futurePaths.length > 0) {
                    searchPath(futurePaths[futurePaths.length - 1]);
                    futurePaths.pop();
                }
            }

            pathInput.addEventListener("keydown", function(event) {
                if (event.key === "Enter") {
                    searchPath(pathInput.value);
                    pathInput.blur();
                }
            });
            
            explorerView.oncontextmenu = function(event) {
                filo.ui.showContextMenu(event, explorerContext);
            };

            window.addEventListener("resize", function() {
                const width = window.innerWidth;
                const height = window.innerHeight;

                if (width < 500) {
                    pathBack.style.left = "20px";
                    pathForward.style.left = "60px";
                    pathInput.style.marginLeft = "90px";
                    pathInput.style.width = "calc(100% - 190px)";
                    pathLinks.style.marginLeft = "90px";
                    quickAccess.style.display = "none";
                    explorerView.style.left = 0;
                    explorerView.style.width = "100%";
                } else {
                    pathBack.style.left = "180px";
                    pathForward.style.left = "220px";
                    pathInput.style.marginLeft = "250px";
                    pathInput.style.width = "calc(100% - 350px)";
                    pathLinks.style.marginLeft = "250px";
                    explorerView.style.left = "180px";
                    explorerView.style.width = "calc(100% - 220px)";
                    quickAccess.style.display = "block";
                }

                showPathLinks();
            });

            function getData() {
                filo.fs.read(`${filo.fs.appData}/config.json`).then(result => {
                    appData = result;
                });
            }

            window.onload = async function() {
                filo.fs.read(filo.fs.appData).then(result => {
                    if (result.files.length < 1) {
                        const configObj = {
                            show_hidden: false
                        };

                        filo.fs.createFile(`${filo.fs.appData}/config.json`, JSON.stringify(configObj, null, 4)).then(result => {
                            if (result.message !== "success") {
                                filo.ui.exit();
                            }

                            getData();
                        });
                    } else {
                        getData();
                    }
                }).then(() => {
                    searchPath("/usr/home");
                });
            }
        </script>
    </body>
</html>